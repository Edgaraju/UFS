gosta(george, kate).
gosta(kate, george).
gosta(george, vinho).
gosta(susie, vinho).

come(lobo, ovelha).
come(ovelha,alface).

amigo(X, Y) :- gosta(X, Y), gosta(Y, X).

membro(a, [a, b, c]).
membro(b, [a, b, c]).
membro(c, [a, b, c]).

membro(X, [X|_]).
membro(X, [_|T]) :- membro(X, T).

adiciona(X, [], [X]).
adiciona(X, [H|T], [H|Y]) :- adiciona(X,T,Y).

esquerda(_, [], []).
esquerda(X, [H|T], Y) :- H < X, esquerda(X, T, Y1), append([H], Y1, Y), !.
esquerda(X, [_|T], Y) :- esquerda(X, T, Y).

direita(_, [], []).
direita(X, [H|T], Y) :- H > X, direita(X, T, Y1), append([H], Y1, Y), !.
direita(X, [_|T], Y) :- direita(X, T, Y).

quicksort([], []).
quicksort([X], [X]).
quicksort([H|T], Y) :-  esquerda(H, T, Y1), direita(H, T, Y2), quicksort(Y1, Z1),
                        quicksort(Y2, Z2), append(Z1, [H], Z3), append(Z3, Z2, Y), !.

member(X, [X]).
member(X, [_|T]) :- member(X, T).

queens([]).
queens([X/Y|T]) :-	queens(T),
					member(Y, [1,2,3,4,5,6,7,8]),
					noataque(X/Y, T).

noataque(_, []).
noataque(X/Y, [X1/Y1|T]) :- X =\= X1,
                            Y =\= Y1,
                            X-Y =\= X1-Y1,
                            X+Y =\= X1+Y1,
                            noataque(X/Y, T).

# queens([1/Y1, 2/Y2, 3/Y3, 4/Y4, 5/Y5, 6/Y6, 7/Y7, 8/Y8]).

fractal :-
	new(D, window('Fractal')),
	send(D, size, size(800, 600)),
	drawTree(D, 400, 500, -90, 9),
	send(D, open).

drawTree(_D, _X, _Y, _Angle, 0).
drawTree(D, X1, Y1, Angle, Depth) :-
	X2 is X1 + cos(Angle * pi / 180.0) * Depth * 10.0,
	Y2 is Y1 + sin(Angle * pi / 180.0) * Depth * 10.0,
	new(Line, line(X1, Y1, X2, Y2, none)),
	send(D, display, Line),
	A1 is Angle - 30,
	A2 is Angle + 30,
	De is Depth - 1,
	drawTree(D, X2, Y2, A1, De),
	drawTree(D, X2, Y2, A2, De).