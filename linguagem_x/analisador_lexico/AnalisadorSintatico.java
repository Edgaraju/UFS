
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 01 17:59:27 BRT 2016
//----------------------------------------------------

package analisador_lexico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 01 17:59:27 BRT 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\004" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\006\000\002\016\003\000\002\017\006\000\002" +
    "\021\002\000\002\021\003\000\002\020\003\000\002\020" +
    "\005\000\002\022\003\000\002\022\010\000\002\022\012" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\012\000\002\023\007\000\002" +
    "\023\003\000\002\023\003\000\002\024\007\000\002\025" +
    "\006\000\002\026\005\000\002\027\002\000\002\027\003" +
    "\000\002\030\003\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\006\006\000\002" +
    "\007\006\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\005\000\002\034\003\000\002\034\006" +
    "\000\002\035\003\000\002\035\003\000\002\036\005\000" +
    "\002\010\004\000\002\037\010\000\002\041\002\000\002" +
    "\041\003\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\044\004\000\002\045\005" +
    "\000\002\040\004\000\002\040\003\000\002\046\005\000" +
    "\002\047\002\000\002\047\003\000\002\050\003\000\002" +
    "\050\004\000\002\051\004\000\002\011\004\000\002\052" +
    "\007\000\002\053\002\000\002\053\003\000\002\054\003" +
    "\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\014\002\uffff\004\013\005\021\011\020\012" +
    "\011\001\002\000\014\002\ufffa\004\ufffa\005\ufffa\011\ufffa" +
    "\012\ufffa\001\002\000\004\002\000\001\002\000\026\021" +
    "\243\023\051\032\035\043\046\044\052\045\043\046\040" +
    "\047\041\050\042\051\045\001\002\000\014\002\ufff9\004" +
    "\ufff9\005\ufff9\011\ufff9\012\ufff9\001\002\000\014\002\ufffd" +
    "\004\ufffd\005\ufffd\011\ufffd\012\ufffd\001\002\000\004\051" +
    "\233\001\002\000\004\002\232\001\002\000\010\006\025" +
    "\007\026\010\024\001\002\000\012\013\154\016\147\021" +
    "\150\051\155\001\002\000\014\002\ufffe\004\013\005\021" +
    "\011\020\012\011\001\002\000\014\002\ufff8\004\ufff8\005" +
    "\ufff8\011\ufff8\012\ufff8\001\002\000\014\002\ufffb\004\ufffb" +
    "\005\ufffb\011\ufffb\012\ufffb\001\002\000\010\006\025\007" +
    "\026\010\024\001\002\000\010\006\025\007\026\010\024" +
    "\001\002\000\004\051\ufff7\001\002\000\004\051\031\001" +
    "\002\000\004\051\ufff4\001\002\000\004\051\ufff6\001\002" +
    "\000\004\051\ufff5\001\002\000\006\025\124\026\123\001" +
    "\002\000\006\025\uffc0\026\uffc0\001\002\000\014\017\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\001\002\000\012\017" +
    "\034\025\uffbe\026\uffbe\027\033\001\002\000\026\021\115" +
    "\023\051\032\035\043\046\044\052\045\043\046\040\047" +
    "\041\050\042\051\045\001\002\000\026\020\uffdb\023\051" +
    "\032\035\043\046\044\052\045\043\046\040\047\041\050" +
    "\042\051\045\001\002\000\024\023\051\032\035\043\046" +
    "\044\052\045\043\046\040\047\041\050\042\051\045\001" +
    "\002\000\040\020\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\001\002\000\004\020\113" +
    "\001\002\000\040\020\ufff1\022\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000\040\020" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\001\002\000\040\020\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001\002" +
    "\000\040\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\001\002\000\036\020\uffd9\022" +
    "\uffd9\024\uffd9\026\uffd9\030\060\031\063\032\056\033\061" +
    "\034\064\035\062\037\066\040\065\041\057\042\067\001" +
    "\002\000\044\017\105\020\uffdf\022\uffdf\023\106\024\uffdf" +
    "\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002" +
    "\000\024\023\051\032\035\043\046\044\052\045\043\046" +
    "\040\047\041\050\042\051\045\001\002\000\040\020\uffe0" +
    "\022\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\001\002\000\040\020\uffdd\022\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000" +
    "\024\023\051\032\035\043\046\044\052\045\043\046\040" +
    "\047\041\050\042\051\045\001\002\000\040\020\ufff3\022" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\001\002\000\010\020\uffda\024\uffda\026\054\001\002" +
    "\000\024\023\051\032\035\043\046\044\052\045\043\046" +
    "\040\047\041\050\042\051\045\001\002\000\036\020\uffd8" +
    "\022\uffd8\024\uffd8\026\uffd8\030\060\031\063\032\056\033" +
    "\061\034\064\035\062\037\066\040\065\041\057\042\067" +
    "\001\002\000\024\023\051\032\035\043\046\044\052\045" +
    "\043\046\040\047\041\050\042\051\045\001\002\000\024" +
    "\023\051\032\035\043\046\044\052\045\043\046\040\047" +
    "\041\050\042\051\045\001\002\000\024\023\051\032\035" +
    "\043\046\044\052\045\043\046\040\047\041\050\042\051" +
    "\045\001\002\000\024\023\051\032\035\043\046\044\052" +
    "\045\043\046\040\047\041\050\042\051\045\001\002\000" +
    "\024\023\051\032\035\043\046\044\052\045\043\046\040" +
    "\047\041\050\042\051\045\001\002\000\024\023\051\032" +
    "\035\043\046\044\052\045\043\046\040\047\041\050\042" +
    "\051\045\001\002\000\024\023\051\032\035\043\046\044" +
    "\052\045\043\046\040\047\041\050\042\051\045\001\002" +
    "\000\024\023\051\032\035\043\046\044\052\045\043\046" +
    "\040\047\041\050\042\051\045\001\002\000\024\023\051" +
    "\032\035\043\046\044\052\045\043\046\040\047\041\050" +
    "\042\051\045\001\002\000\024\023\051\032\035\043\046" +
    "\044\052\045\043\046\040\047\041\050\042\051\045\001" +
    "\002\000\040\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\061\034\064\035\062\037" +
    "\uffe4\040\uffe4\041\057\042\uffe4\001\002\000\040\020\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\063\032" +
    "\056\033\061\034\064\035\062\037\uffe7\040\uffe7\041\057" +
    "\042\067\001\002\000\040\020\uffe8\022\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\063\032\056\033\061\034\064" +
    "\035\062\037\uffe8\040\uffe8\041\057\042\067\001\002\000" +
    "\040\020\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\001\002\000\040\020\uffed\022\uffed" +
    "\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\061\034\064\035\062\037\uffed\040\uffed\041\057\042\uffed" +
    "\001\002\000\040\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000\040\020" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\001\002\000\040\020\uffe6\022\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\031\063\032\056\033\061\034" +
    "\064\035\062\037\uffe6\040\uffe6\041\057\042\067\001\002" +
    "\000\040\020\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\001\002\000\040\020\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\061\034\064\035\062\037\uffec\040\uffec\041\057\042" +
    "\uffec\001\002\000\030\024\103\030\060\031\063\032\056" +
    "\033\061\034\064\035\062\037\066\040\065\041\057\042" +
    "\067\001\002\000\040\020\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\040" +
    "\020\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\030\060\031" +
    "\063\032\056\033\061\034\064\035\062\037\066\040\065" +
    "\041\057\042\067\001\002\000\024\023\051\032\035\043" +
    "\046\044\052\045\043\046\040\047\041\050\042\051\045" +
    "\001\002\000\026\023\051\024\uffdb\032\035\043\046\044" +
    "\052\045\043\046\040\047\041\050\042\051\045\001\002" +
    "\000\004\024\110\001\002\000\064\002\uffdc\004\uffdc\005" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\051\uffdc\001\002\000\030\020\112\030" +
    "\060\031\063\032\056\033\061\034\064\035\062\037\066" +
    "\040\065\041\057\042\067\001\002\000\040\020\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\001\002\000\014\017\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\001\002\000\040\020\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002\000" +
    "\024\023\051\032\035\043\046\044\052\045\043\046\040" +
    "\047\041\050\042\051\045\001\002\000\006\025\uffb9\026" +
    "\uffb9\001\002\000\006\025\uffbd\026\uffbd\001\002\000\032" +
    "\025\uffba\026\uffba\030\060\031\063\032\056\033\061\034" +
    "\064\035\062\037\066\040\065\041\057\042\067\001\002" +
    "\000\006\022\122\026\054\001\002\000\006\025\uffb8\026" +
    "\uffb8\001\002\000\004\051\031\001\002\000\026\002\uffc1" +
    "\004\uffc1\005\uffc1\011\uffc1\012\uffc1\013\uffc1\016\uffc1\021" +
    "\uffc1\022\uffc1\051\uffc1\001\002\000\006\025\uffbf\026\uffbf" +
    "\001\002\000\004\051\127\001\002\000\004\023\130\001" +
    "\002\000\014\004\134\006\025\007\026\010\024\024\uffb5" +
    "\001\002\000\004\024\145\001\002\000\006\024\uffb4\026" +
    "\143\001\002\000\006\024\uffb1\026\uffb1\001\002\000\010" +
    "\006\025\007\026\010\024\001\002\000\006\024\uffb3\026" +
    "\uffb3\001\002\000\006\024\uffb0\026\uffb0\001\002\000\004" +
    "\051\031\001\002\000\010\017\034\024\uffaf\026\uffaf\001" +
    "\002\000\004\051\031\001\002\000\010\017\034\024\uffae" +
    "\026\uffae\001\002\000\012\004\134\006\025\007\026\010" +
    "\024\001\002\000\006\024\uffb2\026\uffb2\001\002\000\026" +
    "\021\uffb6\023\uffb6\032\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002\000\014\002\ufffc" +
    "\004\ufffc\005\ufffc\011\ufffc\012\ufffc\001\002\000\004\023" +
    "\224\001\002\000\020\004\013\005\021\013\154\016\147" +
    "\021\150\022\uffc9\051\155\001\002\000\026\002\uffd7\004" +
    "\uffd7\005\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\051\uffd7\001\002\000\014\002\uffa5\004\uffa5\005" +
    "\uffa5\011\uffa5\012\uffa5\001\002\000\026\002\uffd4\004\uffd4" +
    "\005\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\021\uffd4\022" +
    "\uffd4\051\uffd4\001\002\000\004\023\163\001\002\000\006" +
    "\023\106\027\160\001\002\000\026\002\uffd2\004\uffd2\005" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2" +
    "\051\uffd2\001\002\000\026\002\uffd3\004\uffd3\005\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\016\uffd3\021\uffd3\022\uffd3\051\uffd3" +
    "\001\002\000\024\023\051\032\035\043\046\044\052\045" +
    "\043\046\040\047\041\050\042\051\045\001\002\000\030" +
    "\025\162\030\060\031\063\032\056\033\061\034\064\035" +
    "\062\037\066\040\065\041\057\042\067\001\002\000\030" +
    "\002\uffcb\004\uffcb\005\uffcb\011\uffcb\012\uffcb\013\uffcb\015" +
    "\uffcb\016\uffcb\021\uffcb\022\uffcb\051\uffcb\001\002\000\024" +
    "\023\051\032\035\043\046\044\052\045\043\046\040\047" +
    "\041\050\042\051\045\001\002\000\030\024\165\030\060" +
    "\031\063\032\056\033\061\034\064\035\062\037\066\040" +
    "\065\041\057\042\067\001\002\000\004\014\166\001\002" +
    "\000\012\013\173\016\167\021\150\051\155\001\002\000" +
    "\004\023\207\001\002\000\030\002\uffd7\004\uffd7\005\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\015\uffd1\016\uffd7\021\uffd7\022" +
    "\uffd7\051\uffd7\001\002\000\026\002\uffd6\004\uffd6\005\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\016\uffd6\021\uffd6\022\uffd6\051" +
    "\uffd6\001\002\000\004\015\206\001\002\000\004\023\176" +
    "\001\002\000\030\002\uffd2\004\uffd2\005\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\015\uffcd\016\uffd2\021\uffd2\022\uffd2\051\uffd2" +
    "\001\002\000\030\002\uffd3\004\uffd3\005\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffce\016\uffd3\021\uffd3\022\uffd3\051\uffd3" +
    "\001\002\000\024\023\051\032\035\043\046\044\052\045" +
    "\043\046\040\047\041\050\042\051\045\001\002\000\030" +
    "\024\200\030\060\031\063\032\056\033\061\034\064\035" +
    "\062\037\066\040\065\041\057\042\067\001\002\000\004" +
    "\014\201\001\002\000\012\013\173\016\167\021\150\051" +
    "\155\001\002\000\004\015\203\001\002\000\012\013\173" +
    "\016\167\021\150\051\155\001\002\000\026\002\uffd5\004" +
    "\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5\021\uffd5" +
    "\022\uffd5\051\uffd5\001\002\000\004\015\uffd0\001\002\000" +
    "\012\013\154\016\147\021\150\051\155\001\002\000\024" +
    "\023\051\032\035\043\046\044\052\045\043\046\040\047" +
    "\041\050\042\051\045\001\002\000\030\024\211\030\060" +
    "\031\063\032\056\033\061\034\064\035\062\037\066\040" +
    "\065\041\057\042\067\001\002\000\012\013\173\016\167" +
    "\021\150\051\155\001\002\000\026\002\uffcc\004\uffcc\005" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\016\uffcc\021\uffcc\022\uffcc" +
    "\051\uffcc\001\002\000\004\015\uffcf\001\002\000\020\004" +
    "\uffc3\005\uffc3\013\uffc3\016\uffc3\021\uffc3\022\uffc3\051\uffc3" +
    "\001\002\000\020\004\uffc5\005\uffc5\013\uffc5\016\uffc5\021" +
    "\uffc5\022\uffc5\051\uffc5\001\002\000\020\004\013\005\021" +
    "\013\154\016\147\021\150\022\uffc8\051\155\001\002\000" +
    "\020\004\uffc4\005\uffc4\013\uffc4\016\uffc4\021\uffc4\022\uffc4" +
    "\051\uffc4\001\002\000\004\022\222\001\002\000\020\004" +
    "\uffc7\005\uffc7\013\uffc7\016\uffc7\021\uffc7\022\uffc7\051\uffc7" +
    "\001\002\000\030\002\uffca\004\uffca\005\uffca\011\uffca\012" +
    "\uffca\013\uffca\015\uffca\016\uffca\021\uffca\022\uffca\051\uffca" +
    "\001\002\000\020\004\uffc6\005\uffc6\013\uffc6\016\uffc6\021" +
    "\uffc6\022\uffc6\051\uffc6\001\002\000\024\023\051\032\035" +
    "\043\046\044\052\045\043\046\040\047\041\050\042\051" +
    "\045\001\002\000\030\024\226\030\060\031\063\032\056" +
    "\033\061\034\064\035\062\037\066\040\065\041\057\042" +
    "\067\001\002\000\012\013\154\016\147\021\150\051\155" +
    "\001\002\000\004\051\031\001\002\000\006\025\231\026" +
    "\123\001\002\000\026\002\uffc2\004\uffc2\005\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\016\uffc2\021\uffc2\022\uffc2\051\uffc2\001" +
    "\002\000\004\002\001\001\002\000\004\023\234\001\002" +
    "\000\012\006\025\007\026\010\024\024\uffa3\001\002\000" +
    "\006\024\uffa1\026\uffa1\001\002\000\004\024\242\001\002" +
    "\000\006\024\uffa2\026\240\001\002\000\010\006\025\007" +
    "\026\010\024\001\002\000\006\024\uffa0\026\uffa0\001\002" +
    "\000\012\013\uffa4\016\uffa4\021\uffa4\051\uffa4\001\002\000" +
    "\026\022\uffaa\023\051\032\035\043\046\044\052\045\043" +
    "\046\040\047\041\050\042\051\045\001\002\000\014\002" +
    "\uffac\004\uffac\005\uffac\011\uffac\012\uffac\001\002\000\030" +
    "\025\247\030\060\031\063\032\056\033\061\034\064\035" +
    "\062\037\066\040\065\041\057\042\067\001\002\000\014" +
    "\002\uffb7\004\uffb7\005\uffb7\011\uffb7\012\uffb7\001\002\000" +
    "\014\002\uffad\004\uffad\005\uffad\011\uffad\012\uffad\001\002" +
    "\000\026\022\uffa8\023\uffa8\032\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002\000\026" +
    "\022\uffa9\023\051\032\035\043\046\044\052\045\043\046" +
    "\040\047\041\050\042\051\045\001\002\000\030\025\255" +
    "\030\060\031\063\032\056\033\061\034\064\035\062\037" +
    "\066\040\065\041\057\042\067\001\002\000\004\022\254" +
    "\001\002\000\014\002\uffab\004\uffab\005\uffab\011\uffab\012" +
    "\uffab\001\002\000\026\022\uffa6\023\uffa6\032\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\001" +
    "\002\000\026\022\uffa7\023\uffa7\032\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\026\002\011\003\004\004\014\005\007\006" +
    "\016\007\003\010\006\011\015\037\005\052\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\046\015" +
    "\244\016\035\017\047\040\245\046\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\226\013\021\001\001\000\014\017\155" +
    "\022\151\024\152\025\156\026\150\001\001\000\020\005" +
    "\145\006\016\007\003\010\006\011\015\037\005\052\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\125\013\021\001\001\000\006\012\022\013\021\001\001" +
    "\000\002\001\001\000\010\032\026\033\027\034\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\046\015\117\016\035\017\047" +
    "\035\116\036\115\001\001\000\016\014\046\015\043\016" +
    "\035\017\047\020\052\021\036\001\001\000\012\014\046" +
    "\015\113\016\035\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\046\015\103\016\035\017\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\046\015" +
    "\101\016\035\017\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\046\015\054\016\035\017\047\001" +
    "\001\000\002\001\001\000\012\014\046\015\100\016\035" +
    "\017\047\001\001\000\012\014\046\015\077\016\035\017" +
    "\047\001\001\000\012\014\046\015\076\016\035\017\047" +
    "\001\001\000\012\014\046\015\075\016\035\017\047\001" +
    "\001\000\012\014\046\015\074\016\035\017\047\001\001" +
    "\000\012\014\046\015\073\016\035\017\047\001\001\000" +
    "\012\014\046\015\072\016\035\017\047\001\001\000\012" +
    "\014\046\015\071\016\035\017\047\001\001\000\012\014" +
    "\046\015\070\016\035\017\047\001\001\000\012\014\046" +
    "\015\067\016\035\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\046\015" +
    "\110\016\035\017\047\001\001\000\016\014\046\015\043" +
    "\016\035\017\047\020\052\021\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\046\015" +
    "\043\016\035\017\047\020\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\124\034\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\136\013\021\041\130\042\131\043\134" +
    "\044\132\045\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\140\013\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\137\001" +
    "\001\000\002\001\001\000\004\034\141\001\001\000\002" +
    "\001\001\000\014\012\136\013\021\043\143\044\132\045" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\216\007\213\017" +
    "\155\022\214\024\152\025\156\026\150\027\217\030\215" +
    "\031\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\046\015\160\016" +
    "\035\017\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\046\015\163\016\035\017\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\173\022\170" +
    "\023\171\024\152\025\174\026\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\046\015\176\016\035\017\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\173\022\170\023" +
    "\201\024\152\025\174\026\167\001\001\000\002\001\001" +
    "\000\016\017\173\022\203\023\204\024\152\025\174\026" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\155\022\203\024\152\025\156\026\150\001\001\000" +
    "\012\014\046\015\207\016\035\017\047\001\001\000\002" +
    "\001\001\000\016\017\173\022\211\023\212\024\152\025" +
    "\174\026\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\216\007" +
    "\213\017\155\022\214\024\152\025\156\026\150\031\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\046" +
    "\015\224\016\035\017\047\001\001\000\002\001\001\000" +
    "\014\017\155\022\211\024\152\025\156\026\150\001\001" +
    "\000\010\032\227\033\027\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\136\013\021\044\234\053\235\054\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\136\013\021\044\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\046\015\251\016\035" +
    "\017\047\047\252\050\250\051\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\046\015\251\016\035\017" +
    "\047\051\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");

        if (info instanceof java_cup.runtime.Symbol) {
            m.append( "("+info.toString()+")" );
        }
        m.append(" : "+message);
        System.out.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_param_formal_proc ::= lista_param_formal_proc COMMA param_ref 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_param_formal_proc ::= param_ref 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_param_formal_proc_opt ::= lista_param_formal_proc 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",41, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_param_formal_proc_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",41, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ass_proc ::= PROCEDURE IDENTIFIER LPAREN lista_param_formal_proc_opt RPAREN 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ass_proc",40, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dec_proc ::= ass_proc comando 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_proc",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dec_exp ::= expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_exp",39, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dec_bloco_exp ::= dec_bloco_exp dec_exp 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dec_bloco_exp ::= dec_exp 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dec_bloco_exp_opt ::= dec_bloco_exp 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",37, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dec_bloco_exp_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",37, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloco_exp ::= LBRACE dec_bloco_exp_opt RBRACE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_exp",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // corpo_func ::= bloco_exp 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("corpo_func",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // corpo_func ::= expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("corpo_func",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // param_copia ::= VAR tipo declarador_var_id 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_copia",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // param_ref ::= tipo declarador_var_id 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_ref",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // param_formal ::= param_copia 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_formal",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // param_formal ::= param_ref 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_formal",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_param_formal ::= lista_param_formal COMMA param_formal 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_param_formal ::= param_formal 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_param_formal_opt ::= lista_param_formal 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",31, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_param_formal_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",31, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ass_func ::= FUNCTION tipo IDENTIFIER LPAREN lista_param_formal_opt RPAREN 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ass_func",29, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_func ::= ass_func corpo_func 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_func",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicializador_array ::= LBRACE lista_expressao RBRACE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("inicializador_array",28, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicializador_var ::= inicializador_array 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("inicializador_var",27, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicializador_var ::= expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("inicializador_var",27, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declarador_var_id ::= declarador_var_id LBRACK exp_opt RBRACK 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_var_id",26, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declarador_var_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_var_id",26, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declarador_var ::= declarador_var_id EQ inicializador_var 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_var",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declarador_var ::= declarador_var_id 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_var",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declarador_vars ::= declarador_vars COMMA declarador_var 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_vars",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declarador_vars ::= declarador_var 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_vars",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_cons ::= CONS tipo declarador_vars SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_cons",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_var ::= VAR tipo declarador_vars SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_var",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_comandos ::= dec_cons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_comandos ::= dec_var 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_comandos ::= comando 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloco_comandos ::= bloco_comandos dec_comandos 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloco_comandos ::= dec_comandos 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloco_comandos_opt ::= bloco_comandos 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloco_comandos_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloco ::= LBRACE bloco_comandos_opt RBRACE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign ::= IDENTIFIER EQ expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while ::= WHILE LPAREN expressao RPAREN comando 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando_restrito ::= chamada 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando_restrito ::= assign 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando_restrito ::= WHILE LPAREN expressao RPAREN comando_restrito 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando_restrito ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando_restrito 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando_restrito ::= bloco 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando ::= chamada 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando ::= assign 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando ::= while 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando ::= IF LPAREN expressao RPAREN THEN comando 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando ::= bloco 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_expressao ::= lista_expressao COMMA expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_expressao",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_expressao ::= expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_expressao",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_opt ::= lista_expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp_opt",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp_opt",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // chamada ::= IDENTIFIER LPAREN exp_opt RPAREN 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chamada",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primaria ::= chamada 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primaria ::= IDENTIFIER LBRACK expressao RBRACK 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primaria ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primaria ::= literal 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primaria ::= LPAREN expressao RPAREN 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao ::= NOT expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao ::= MINUS expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao ::= expressao OR expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao ::= expressao AND expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao ::= expressao EQEQ expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao ::= expressao LT expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao ::= expressao GT expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao ::= expressao MOD expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao ::= expressao DIV expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao ::= expressao MULT expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao ::= expressao MINUS expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao ::= expressao PLUS expressao 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressao ::= primaria 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numerico ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("numerico",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numerico ::= INT 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("numerico",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= numerico 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= dec_proc 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= dec_func 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= dec_cons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= dec_var 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_list ::= dec_list dec 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_list ::= dec 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list_opt ::= dec_list 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list_opt",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list_opt",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list_opt 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

