
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 09 15:09:51 BRT 2016
//----------------------------------------------------

package analisador;

import java.util.*;
import java_cup.runtime.*;
import sintaxe_abstrata.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 09 15:09:51 BRT 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\004\000\002\014\004\000\002\016\003\000\002\016" +
    "\004\000\002\022\005\000\002\015\003\000\002\015\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\004\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\032\006\000\002\030\003\000\002\031" +
    "\003\000\002\031\004\000\002\020\002\000\002\020\003" +
    "\000\002\017\003\000\002\017\005\000\002\054\003\000" +
    "\002\054\010\000\002\054\012\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\003\000\002\055" +
    "\012\000\002\055\007\000\002\055\003\000\002\055\003" +
    "\000\002\057\007\000\002\060\006\000\002\061\006\000" +
    "\002\062\005\000\002\063\002\000\002\063\003\000\002" +
    "\064\003\000\002\064\004\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\010\006\000\002\007\010\000" +
    "\002\011\010\000\002\006\010\000\002\006\010\000\002" +
    "\034\003\000\002\021\005\000\002\033\004\000\002\035" +
    "\010\000\002\037\002\000\002\037\003\000\002\040\003" +
    "\000\002\040\005\000\002\043\003\000\002\043\003\000" +
    "\002\044\004\000\002\044\004\000\002\045\005\000\002" +
    "\045\005\000\002\026\004\000\002\026\003\000\002\046" +
    "\005\000\002\047\002\000\002\047\003\000\002\050\004" +
    "\000\002\051\002\000\002\051\003\000\002\052\003\000" +
    "\002\052\004\000\002\027\004\000\002\053\004\000\002" +
    "\036\007\000\002\041\002\000\002\041\003\000\002\042" +
    "\003\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\012\004\012\005\023\011\021\012\010\001" +
    "\002\000\014\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc" +
    "\001\002\000\022\021\262\023\052\032\037\043\047\044" +
    "\053\045\040\046\042\047\046\001\002\000\014\002\ufffb" +
    "\004\ufffb\005\ufffb\011\ufffb\012\ufffb\001\002\000\014\002" +
    "\uffff\004\uffff\005\uffff\011\uffff\012\uffff\001\002\000\004" +
    "\047\252\001\002\000\004\002\251\001\002\000\010\006" +
    "\031\007\032\010\026\001\002\000\012\013\164\016\155" +
    "\021\156\047\165\001\002\000\014\002\000\004\012\005" +
    "\023\011\021\012\010\001\002\000\026\002\uffbc\004\uffbc" +
    "\005\uffbc\011\uffbc\012\uffbc\013\uffbc\016\uffbc\021\uffbc\022" +
    "\uffbc\047\uffbc\001\002\000\014\002\ufffa\004\ufffa\005\ufffa" +
    "\011\ufffa\012\ufffa\001\002\000\014\002\ufffd\004\ufffd\005" +
    "\ufffd\011\ufffd\012\ufffd\001\002\000\026\002\uffba\004\uffba" +
    "\005\uffba\011\uffba\012\uffba\013\uffba\016\uffba\021\uffba\022" +
    "\uffba\047\uffba\001\002\000\010\006\031\007\032\010\026" +
    "\001\002\000\026\002\uffbb\004\uffbb\005\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\016\uffbb\021\uffbb\022\uffbb\047\uffbb\001\002" +
    "\000\010\006\031\007\032\010\026\001\002\000\004\047" +
    "\ufff8\001\002\000\006\017\033\047\ufff7\001\002\000\006" +
    "\017\uffef\047\uffef\001\002\000\004\047\115\001\002\000" +
    "\004\047\ufff9\001\002\000\006\017\033\047\ufff6\001\002" +
    "\000\006\017\ufff0\047\ufff0\001\002\000\020\023\052\032" +
    "\037\043\047\044\053\045\040\046\042\047\046\001\002" +
    "\000\006\017\ufff3\047\ufff3\001\002\000\006\017\033\047" +
    "\ufff4\001\002\000\006\017\ufff2\047\ufff2\001\002\000\020" +
    "\023\052\032\037\043\047\044\053\045\040\046\042\047" +
    "\046\001\002\000\040\020\uffed\022\uffed\024\uffed\025\uffed" +
    "\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\040" +
    "\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\001\002\000\040\020\uffec\022\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\001" +
    "\002\000\042\017\033\020\uffd9\022\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001\002\000\040" +
    "\020\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\001\002\000\030\020\112\030\057\031" +
    "\062\032\055\033\060\034\063\035\061\037\066\040\064" +
    "\041\056\042\067\001\002\000\044\017\uffd8\020\uffd8\022" +
    "\uffd8\023\103\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\001\002\000\020\023\052\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\040\020" +
    "\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\040\020\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\020\023\052\032\037\043\047\044\053\045\040\046" +
    "\042\047\046\001\002\000\040\020\uffee\022\uffee\024\uffee" +
    "\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002" +
    "\000\030\024\065\030\057\031\062\032\055\033\060\034" +
    "\063\035\061\037\066\040\064\041\056\042\067\001\002" +
    "\000\020\023\052\032\037\043\047\044\053\045\040\046" +
    "\042\047\046\001\002\000\020\023\052\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\020\023" +
    "\052\032\037\043\047\044\053\045\040\046\042\047\046" +
    "\001\002\000\020\023\052\032\037\043\047\044\053\045" +
    "\040\046\042\047\046\001\002\000\020\023\052\032\037" +
    "\043\047\044\053\045\040\046\042\047\046\001\002\000" +
    "\020\023\052\032\037\043\047\044\053\045\040\046\042" +
    "\047\046\001\002\000\020\023\052\032\037\043\047\044" +
    "\053\045\040\046\042\047\046\001\002\000\020\023\052" +
    "\032\037\043\047\044\053\045\040\046\042\047\046\001" +
    "\002\000\040\020\uffde\022\uffde\024\uffde\025\uffde\026\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\001\002\000\020\023\052" +
    "\032\037\043\047\044\053\045\040\046\042\047\046\001" +
    "\002\000\020\023\052\032\037\043\047\044\053\045\040" +
    "\046\042\047\046\001\002\000\040\020\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\060" +
    "\034\063\035\061\037\uffe1\040\uffe1\041\056\042\uffe1\001" +
    "\002\000\040\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\031\062\032\055\033\060\034\063\035\061\037" +
    "\uffe4\040\uffe4\041\056\042\067\001\002\000\040\020\uffe5" +
    "\022\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\062\032" +
    "\055\033\060\034\063\035\061\037\uffe5\040\uffe5\041\056" +
    "\042\067\001\002\000\040\020\uffe7\022\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000" +
    "\040\020\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\060\034\063\035\061\037\uffea\040" +
    "\uffea\041\056\042\uffea\001\002\000\040\020\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\001\002\000\040\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000\040\020" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\062" +
    "\032\055\033\060\034\063\035\061\037\uffe3\040\uffe3\041" +
    "\056\042\067\001\002\000\040\020\uffe2\022\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002" +
    "\000\040\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\060\034\063\035\061\037\uffe9" +
    "\040\uffe9\041\056\042\uffe9\001\002\000\040\020\uffdf\022" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\030\057\031\062\032\055" +
    "\033\060\034\063\035\061\037\066\040\064\041\056\042" +
    "\067\001\002\000\022\023\052\024\uffd6\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\004\024" +
    "\111\001\002\000\034\022\uffd4\024\uffd4\026\uffd4\030\057" +
    "\031\062\032\055\033\060\034\063\035\061\037\066\040" +
    "\064\041\056\042\067\001\002\000\006\024\uffd5\026\107" +
    "\001\002\000\020\023\052\032\037\043\047\044\053\045" +
    "\040\046\042\047\046\001\002\000\034\022\uffd3\024\uffd3" +
    "\026\uffd3\030\057\031\062\032\055\033\060\034\063\035" +
    "\061\037\066\040\064\041\056\042\067\001\002\000\040" +
    "\020\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\001\002\000\046\017\ufff1\020\ufff1\022" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\047\ufff1\001\002\000\044\017\uffd7\020\uffd7" +
    "\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\040\020\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001" +
    "\002\000\012\024\uffb4\025\uffb4\026\uffb4\027\uffb4\001\002" +
    "\000\004\027\117\001\002\000\022\021\120\023\052\032" +
    "\037\043\047\044\053\045\040\046\042\047\046\001\002" +
    "\000\020\023\052\032\037\043\047\044\053\045\040\046" +
    "\042\047\046\001\002\000\004\025\124\001\002\000\030" +
    "\025\123\030\057\031\062\032\055\033\060\034\063\035" +
    "\061\037\066\040\064\041\056\042\067\001\002\000\042" +
    "\002\uffb6\004\uffb6\005\uffb6\011\uffb6\012\uffb6\013\uffb6\016" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\032\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\001\002\000\042\002\uffb5\004" +
    "\uffb5\005\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\032\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\001\002\000\006\022\126\026\107\001\002" +
    "\000\004\025\uffb3\001\002\000\006\017\033\047\ufff5\001" +
    "\002\000\004\047\131\001\002\000\004\023\132\001\002" +
    "\000\014\004\140\006\031\007\032\010\026\024\uffb0\001" +
    "\002\000\004\047\115\001\002\000\004\047\115\001\002" +
    "\000\004\024\151\001\002\000\006\024\uffaf\026\147\001" +
    "\002\000\006\024\uffac\026\uffac\001\002\000\010\006\031" +
    "\007\032\010\026\001\002\000\006\024\uffae\026\uffae\001" +
    "\002\000\006\024\uffab\026\uffab\001\002\000\004\047\115" +
    "\001\002\000\004\047\115\001\002\000\006\024\uffa8\026" +
    "\uffa8\001\002\000\006\024\uffa7\026\uffa7\001\002\000\012" +
    "\004\140\006\031\007\032\010\026\001\002\000\006\024" +
    "\uffad\026\uffad\001\002\000\022\021\uffb1\023\uffb1\032\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002\000" +
    "\006\024\uffa9\026\uffa9\001\002\000\006\024\uffaa\026\uffaa" +
    "\001\002\000\014\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012" +
    "\ufffe\001\002\000\004\023\236\001\002\000\020\004\012" +
    "\005\023\013\164\016\155\021\156\022\uffc3\047\165\001" +
    "\002\000\026\002\uffd2\004\uffd2\005\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\016\uffd2\021\uffd2\022\uffd2\047\uffd2\001\002\000" +
    "\014\002\uff9b\004\uff9b\005\uff9b\011\uff9b\012\uff9b\001\002" +
    "\000\026\002\uffcf\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\016\uffcf\021\uffcf\022\uffcf\047\uffcf\001\002\000\006" +
    "\017\033\027\223\001\002\000\026\002\uffcd\004\uffcd\005" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\021\uffcd\022\uffcd" +
    "\047\uffcd\001\002\000\004\023\172\001\002\000\010\017" +
    "\uffd8\023\167\027\uffd8\001\002\000\026\002\uffce\004\uffce" +
    "\005\uffce\011\uffce\012\uffce\013\uffce\016\uffce\021\uffce\022" +
    "\uffce\047\uffce\001\002\000\022\023\052\024\uffd6\032\037" +
    "\043\047\044\053\045\040\046\042\047\046\001\002\000" +
    "\004\024\171\001\002\000\030\002\uffc5\004\uffc5\005\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\021\uffc5\022" +
    "\uffc5\047\uffc5\001\002\000\020\023\052\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\030\024" +
    "\174\030\057\031\062\032\055\033\060\034\063\035\061" +
    "\037\066\040\064\041\056\042\067\001\002\000\004\014" +
    "\175\001\002\000\012\013\202\016\176\021\156\047\165" +
    "\001\002\000\004\023\216\001\002\000\030\002\uffd2\004" +
    "\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffcc\016\uffd2" +
    "\021\uffd2\022\uffd2\047\uffd2\001\002\000\026\002\uffd1\004" +
    "\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\021\uffd1" +
    "\022\uffd1\047\uffd1\001\002\000\004\015\215\001\002\000" +
    "\004\023\205\001\002\000\030\002\uffcd\004\uffcd\005\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\015\uffc8\016\uffcd\021\uffcd\022" +
    "\uffcd\047\uffcd\001\002\000\030\002\uffce\004\uffce\005\uffce" +
    "\011\uffce\012\uffce\013\uffce\015\uffc9\016\uffce\021\uffce\022" +
    "\uffce\047\uffce\001\002\000\020\023\052\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\030\024" +
    "\207\030\057\031\062\032\055\033\060\034\063\035\061" +
    "\037\066\040\064\041\056\042\067\001\002\000\004\014" +
    "\210\001\002\000\012\013\202\016\176\021\156\047\165" +
    "\001\002\000\004\015\212\001\002\000\012\013\202\016" +
    "\176\021\156\047\165\001\002\000\026\002\uffd0\004\uffd0" +
    "\005\uffd0\011\uffd0\012\uffd0\013\uffd0\016\uffd0\021\uffd0\022" +
    "\uffd0\047\uffd0\001\002\000\004\015\uffcb\001\002\000\012" +
    "\013\164\016\155\021\156\047\165\001\002\000\020\023" +
    "\052\032\037\043\047\044\053\045\040\046\042\047\046" +
    "\001\002\000\030\024\220\030\057\031\062\032\055\033" +
    "\060\034\063\035\061\037\066\040\064\041\056\042\067" +
    "\001\002\000\012\013\202\016\176\021\156\047\165\001" +
    "\002\000\026\002\uffc7\004\uffc7\005\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\016\uffc7\021\uffc7\022\uffc7\047\uffc7\001\002\000" +
    "\004\015\uffca\001\002\000\020\023\052\032\037\043\047" +
    "\044\053\045\040\046\042\047\046\001\002\000\030\025" +
    "\225\030\057\031\062\032\055\033\060\034\063\035\061" +
    "\037\066\040\064\041\056\042\067\001\002\000\030\002" +
    "\uffc6\004\uffc6\005\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\016\uffc6\021\uffc6\022\uffc6\047\uffc6\001\002\000\020\004" +
    "\012\005\023\013\164\016\155\021\156\022\uffc2\047\165" +
    "\001\002\000\020\004\uffbe\005\uffbe\013\uffbe\016\uffbe\021" +
    "\uffbe\022\uffbe\047\uffbe\001\002\000\004\022\234\001\002" +
    "\000\020\004\uffbd\005\uffbd\013\uffbd\016\uffbd\021\uffbd\022" +
    "\uffbd\047\uffbd\001\002\000\020\004\uffc1\005\uffc1\013\uffc1" +
    "\016\uffc1\021\uffc1\022\uffc1\047\uffc1\001\002\000\020\004" +
    "\uffbf\005\uffbf\013\uffbf\016\uffbf\021\uffbf\022\uffbf\047\uffbf" +
    "\001\002\000\030\002\uffc4\004\uffc4\005\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\047\uffc4" +
    "\001\002\000\020\004\uffc0\005\uffc0\013\uffc0\016\uffc0\021" +
    "\uffc0\022\uffc0\047\uffc0\001\002\000\020\023\052\032\037" +
    "\043\047\044\053\045\040\046\042\047\046\001\002\000" +
    "\030\024\240\030\057\031\062\032\055\033\060\034\063" +
    "\035\061\037\066\040\064\041\056\042\067\001\002\000" +
    "\012\013\164\016\155\021\156\047\165\001\002\000\004" +
    "\047\115\001\002\000\006\025\244\027\243\001\002\000" +
    "\022\021\120\023\052\032\037\043\047\044\053\045\040" +
    "\046\042\047\046\001\002\000\026\002\uffb9\004\uffb9\005" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9\021\uffb9\022\uffb9" +
    "\047\uffb9\001\002\000\004\025\250\001\002\000\030\025" +
    "\247\030\057\031\062\032\055\033\060\034\063\035\061" +
    "\037\066\040\064\041\056\042\067\001\002\000\026\002" +
    "\uffb8\004\uffb8\005\uffb8\011\uffb8\012\uffb8\013\uffb8\016\uffb8" +
    "\021\uffb8\022\uffb8\047\uffb8\001\002\000\026\002\uffb7\004" +
    "\uffb7\005\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7\021\uffb7" +
    "\022\uffb7\047\uffb7\001\002\000\004\002\001\001\002\000" +
    "\004\023\253\001\002\000\012\006\031\007\032\010\026" +
    "\024\uff99\001\002\000\006\024\uff98\026\260\001\002\000" +
    "\006\024\uff97\026\uff97\001\002\000\004\024\257\001\002" +
    "\000\012\013\uff9a\016\uff9a\021\uff9a\047\uff9a\001\002\000" +
    "\010\006\031\007\032\010\026\001\002\000\006\024\uff96" +
    "\026\uff96\001\002\000\024\005\023\022\uffa3\023\uffa0\032" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002" +
    "\000\014\002\uffa5\004\uffa5\005\uffa5\011\uffa5\012\uffa5\001" +
    "\002\000\030\025\266\030\057\031\062\032\055\033\060" +
    "\034\063\035\061\037\066\040\064\041\056\042\067\001" +
    "\002\000\014\002\uffb2\004\uffb2\005\uffb2\011\uffb2\012\uffb2" +
    "\001\002\000\014\002\uffa6\004\uffa6\005\uffa6\011\uffa6\012" +
    "\uffa6\001\002\000\004\022\300\001\002\000\004\022\uffa2" +
    "\001\002\000\022\005\023\023\uff9f\032\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\001\002\000\020\023\052" +
    "\032\037\043\047\044\053\045\040\046\042\047\046\001" +
    "\002\000\022\005\uff9e\023\uff9e\032\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\001\002\000\004\022\uffa1\001" +
    "\002\000\030\025\276\030\057\031\062\032\055\033\060" +
    "\034\063\035\061\037\066\040\064\041\056\042\067\001" +
    "\002\000\004\022\uff9c\001\002\000\022\005\uff9d\023\uff9d" +
    "\032\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\001" +
    "\002\000\014\002\uffa4\004\uffa4\005\uffa4\011\uffa4\012\uffa4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\032\002\010\003\013\004\006\005\016\006" +
    "\003\007\021\010\014\011\017\033\005\035\004\036\012" +
    "\053\015\001\001\000\002\001\001\000\022\023\047\024" +
    "\263\025\040\026\264\030\043\031\042\032\050\046\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\240\013\027\014\023" +
    "\015\024\001\001\000\016\031\161\054\157\057\160\060" +
    "\165\061\162\062\156\001\001\000\026\004\153\005\016" +
    "\006\003\007\021\010\014\011\017\033\005\035\004\036" +
    "\012\053\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\127\013" +
    "\027\014\023\015\024\001\001\000\002\001\001\000\012" +
    "\012\026\013\027\014\023\015\024\001\001\000\002\001" +
    "\001\000\006\016\126\022\033\001\001\000\002\001\001" +
    "\000\004\034\115\001\001\000\002\001\001\000\006\016" +
    "\034\022\033\001\001\000\002\001\001\000\016\023\047" +
    "\024\044\025\040\030\043\031\042\032\050\001\001\000" +
    "\002\001\001\000\004\022\035\001\001\000\002\001\001" +
    "\000\016\023\047\024\113\025\040\030\043\031\042\032" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\047\024\101" +
    "\025\040\030\043\031\042\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\047\024\053\025\040" +
    "\030\043\031\042\032\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\047\024\100\025\040\030\043" +
    "\031\042\032\050\001\001\000\016\023\047\024\077\025" +
    "\040\030\043\031\042\032\050\001\001\000\016\023\047" +
    "\024\076\025\040\030\043\031\042\032\050\001\001\000" +
    "\016\023\047\024\075\025\040\030\043\031\042\032\050" +
    "\001\001\000\016\023\047\024\074\025\040\030\043\031" +
    "\042\032\050\001\001\000\016\023\047\024\073\025\040" +
    "\030\043\031\042\032\050\001\001\000\016\023\047\024" +
    "\072\025\040\030\043\031\042\032\050\001\001\000\016" +
    "\023\047\024\071\025\040\030\043\031\042\032\050\001" +
    "\001\000\002\001\001\000\016\023\047\024\070\025\040" +
    "\030\043\031\042\032\050\001\001\000\016\023\047\024" +
    "\067\025\040\030\043\031\042\032\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\105\020\103\023\047\024\104" +
    "\025\040\030\043\031\042\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\047" +
    "\024\107\025\040\030\043\031\042\032\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\120\023\047\024\121\025\040\030\043" +
    "\031\042\032\050\001\001\000\020\017\124\023\047\024" +
    "\104\025\040\030\043\031\042\032\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\132\014\133\015\024\037\134\040\135\043\140\044\136" +
    "\045\141\001\001\000\004\034\152\001\001\000\004\034" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\143\014\142\015\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\145\001\001" +
    "\000\004\034\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\132\014\133\015\024\043\147\044\136" +
    "\045\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\226\006\230\007\021\010\014\011" +
    "\017\031\161\054\232\056\231\057\160\060\165\061\162" +
    "\062\156\063\227\064\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\105\020\167\023\047\024\104" +
    "\025\040\030\043\031\042\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\047\024\172\025\040" +
    "\030\043\031\042\032\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\161\054\177\055\200\057\160" +
    "\060\203\061\202\062\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\047\024\205\025\040\030\043\031\042\032\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\161\054" +
    "\177\055\210\057\160\060\203\061\202\062\176\001\001" +
    "\000\002\001\001\000\020\031\161\054\212\055\213\057" +
    "\160\060\203\061\202\062\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\161\054\212\057\160\060" +
    "\165\061\162\062\156\001\001\000\016\023\047\024\216" +
    "\025\040\030\043\031\042\032\050\001\001\000\002\001" +
    "\001\000\020\031\161\054\220\055\221\057\160\060\203" +
    "\061\202\062\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\047\024\223\025\040\030\043\031\042" +
    "\032\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\226\006\230\007\021\010\014\011\017\031\161" +
    "\054\232\056\234\057\160\060\165\061\162\062\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\047\024\236\025\040\030\043" +
    "\031\042\032\050\001\001\000\002\001\001\000\016\031" +
    "\161\054\220\057\160\060\165\061\162\062\156\001\001" +
    "\000\004\034\241\001\001\000\002\001\001\000\020\021" +
    "\244\023\047\024\245\025\040\030\043\031\042\032\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\132\014\133\015\024\041" +
    "\255\042\253\044\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\132\014\133\015\024\044\260\001\001\000\002\001\001" +
    "\000\014\006\272\047\266\050\267\051\271\052\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\276\001\001\000\020\023\047\024\274\025\040" +
    "\027\273\030\043\031\042\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");

        if (info instanceof java_cup.runtime.Symbol) {
            m.append( "("+info.toString()+")" );
        }
        m.append(" : "+message);
        System.out.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_param_formal_proc ::= lista_param_formal_proc COMMA param_ref 
            {
              List<Parametro> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		List<Parametro> lp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 lp.add(p); RESULT = lp; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_param_formal_proc ::= param_ref 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(Arrays.asList(p)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_param_formal_proc_opt ::= lista_param_formal_proc 
            {
              List<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Parametro> l = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",31, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_param_formal_proc_opt ::= 
            {
              List<Parametro> RESULT =null;
		 RESULT = new ArrayList<Parametro>(); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",31, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ass_proc ::= PROCEDURE IDENTIFIER LPAREN lista_param_formal_proc_opt RPAREN 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Parametro> l = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 Object[] o = new Object[2]; o[0] = i; o[1] = l; RESULT = o; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ass_proc",28, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dec_proc ::= ass_proc comando 
            {
              Procedimento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Procedimento((String) a[0], (List<Parametro>) a[1], c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_proc",41, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dec_exp ::= expressao SEMICOLON 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = e; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_exp",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dec_bloco_cons ::= dec_bloco_cons dec_cons 
            {
              List<DCons> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<DCons> ld = (List<DCons>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DCons d = (DCons)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 ld.add(d); RESULT = ld; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_cons",40, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_bloco_cons ::= dec_cons 
            {
              List<DCons> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DCons d = (DCons)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<DCons>(Arrays.asList(d)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_cons",40, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_bloco_cons_opt ::= dec_bloco_cons 
            {
              List<DCons> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<DCons> ld = (List<DCons>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = ld; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_cons_opt",39, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_bloco_cons_opt ::= 
            {
              List<DCons> RESULT =null;
		 RESULT = new ArrayList<DCons>(); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_cons_opt",39, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_bloco_exp ::= dec_bloco_cons_opt dec_exp 
            {
              BlocoExp RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<DCons> ld = (List<DCons>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BlocoExp(ld, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_bloco_exp_opt ::= dec_bloco_exp 
            {
              BlocoExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		BlocoExp d = (BlocoExp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",37, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dec_bloco_exp_opt ::= 
            {
              BlocoExp RESULT =null;
		 RESULT = new BlocoExp(null, null); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",37, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloco_exp ::= LBRACE dec_bloco_exp_opt RBRACE 
            {
              BlocoExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		BlocoExp d = (BlocoExp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = d; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_exp",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // corpo_func ::= bloco_exp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		BlocoExp b = (BlocoExp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = b; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("corpo_func",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // corpo_func ::= expressao SEMICOLON 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = e; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("corpo_func",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // param_copia ::= VAR tipo_array declarador_var_id 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		TipoArray t = (TipoArray)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ParArrayCopia(t.base, t.exp.size(), id); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_copia",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // param_copia ::= VAR tipo_base declarador_var_id 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		TipoBase t = (TipoBase)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ParBaseCopia(t.tipo, id); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_copia",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // param_ref ::= tipo_array declarador_var_id 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		TipoArray t = (TipoArray)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ParArrayRef(t.base, t.exp.size(), id); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_ref",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // param_ref ::= tipo_base declarador_var_id 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		TipoBase t = (TipoBase)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ParBaseRef(t.tipo, id); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_ref",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // param_formal ::= param_copia 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = p; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_formal",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // param_formal ::= param_ref 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = p; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("param_formal",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_param_formal ::= lista_param_formal COMMA param_formal 
            {
              List<Parametro> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		List<Parametro> lp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 lp.add(p); RESULT = lp; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_param_formal ::= param_formal 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(Arrays.asList(p)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_param_formal_opt ::= lista_param_formal 
            {
              List<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Parametro> l = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",29, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_param_formal_opt ::= 
            {
              List<Parametro> RESULT =null;
		 RESULT = new ArrayList<Parametro>(); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",29, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ass_func ::= FUNCTION tipo IDENTIFIER LPAREN lista_param_formal_opt RPAREN 
            {
              Object[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Parametro> l = (List<Parametro>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 Object[] o = new Object[3]; o[0] = t; o[1] = i; o[2] = l; RESULT = o; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ass_func",27, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dec_func ::= ass_func corpo_func 
            {
              Funcao RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Funcao((Tipo) a[0], (String) a[1], (List<Parametro>) a[2], c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_func",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inicializador_array ::= LBRACE lista_expressao RBRACE 
            {
              List<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> l = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = l; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("inicializador_array",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarador_var_id ::= IDENTIFIER 
            {
              java.lang.String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("declarador_var_id",26, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dec_cons ::= CONS tipo declarador_var_id EQ inicializador_array SEMICOLON 
            {
              DCons RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> le = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new ConsExt(t, id, le); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_cons",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dec_cons ::= CONS tipo declarador_var_id EQ expressao SEMICOLON 
            {
              DCons RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new Cons(t, id, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_cons",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_inic_ext ::= VAR tipo declarador_var_id EQ inicializador_array SEMICOLON 
            {
              VarInicExt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> le = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new VarInicExt(t, id, le); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var_inic_ext",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_inic ::= VAR tipo declarador_var_id EQ expressao SEMICOLON 
            {
              VarInic RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new VarInic(t, id, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var_inic",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_ninic ::= VAR tipo declarador_var_id SEMICOLON 
            {
              VarNaoInic RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new VarNaoInic(t, id); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var_ninic",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_var ::= var_inic_ext 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		VarInicExt v = (VarInicExt)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_var ::= var_inic 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		VarInic v = (VarInic)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_var ::= var_ninic 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		VarNaoInic v = (VarNaoInic)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_comandos ::= dec_cons 
            {
              DVarConsCom RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DCons c = (DCons)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new DC(c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_comandos ::= dec_var 
            {
              DVarConsCom RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DVar v = (DVar)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new DV(v); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_comandos ::= comando 
            {
              DVarConsCom RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Com(c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_comandos",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloco_comandos ::= bloco_comandos dec_comandos 
            {
              List<DVarConsCom> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<DVarConsCom> lc = (List<DVarConsCom>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DVarConsCom c = (DVarConsCom)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 lc.add(c); RESULT = lc; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos",50, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloco_comandos ::= dec_comandos 
            {
              List<DVarConsCom> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DVarConsCom c = (DVarConsCom)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<DVarConsCom>(Arrays.asList(c)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos",50, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloco_comandos_opt ::= bloco_comandos 
            {
              BLOCO RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<DVarConsCom> b = (List<DVarConsCom>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BLOCO(b); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",49, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloco_comandos_opt ::= 
            {
              BLOCO RESULT =null;
		 RESULT = new BLOCO(null); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",49, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloco ::= LBRACE bloco_comandos_opt RBRACE 
            {
              BLOCO RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		BLOCO b = (BLOCO)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = b; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("bloco",48, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // chamada_comando ::= IDENTIFIER LPAREN exp_opt RPAREN 
            {
              CHAMADA RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> e = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new CHAMADA(i, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando",47, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign ::= simples_indexada EQ expressao SEMICOLON 
            {
              ASSIGN RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Var i = (Var)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new ASSIGN(i, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("assign",46, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while ::= WHILE LPAREN expressao RPAREN comando 
            {
              WHILE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new WHILE(e, c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comando_restrito ::= chamada_comando 
            {
              Comando RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		CHAMADA c = (CHAMADA)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comando_restrito ::= assign 
            {
              Comando RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		ASSIGN a = (ASSIGN)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comando_restrito ::= WHILE LPAREN expressao RPAREN comando_restrito 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new WHILE(e, c); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comando_restrito ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando_restrito 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Comando c1 = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c2 = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new IF(e, c1, c2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comando_restrito ::= bloco 
            {
              Comando RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		BLOCO b = (BLOCO)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = b; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando_restrito",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando ::= chamada_comando 
            {
              Comando RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		CHAMADA c = (CHAMADA)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando ::= assign 
            {
              Comando RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		ASSIGN a = (ASSIGN)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando ::= while 
            {
              Comando RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		WHILE w = (WHILE)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = w; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Comando c1 = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c2 = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new IF(e, c1, c2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando ::= IF LPAREN expressao RPAREN THEN comando 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new IF(e, c, null); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando ::= bloco 
            {
              Comando RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		BLOCO b = (BLOCO)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = b; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("comando",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_expressao ::= lista_expressao COMMA expressao 
            {
              List<Exp> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		List<Exp> le = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 le.add(e); RESULT = le; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_expressao",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_expressao ::= expressao 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<Exp>(Arrays.asList(e)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_expressao",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_opt ::= lista_expressao 
            {
              List<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Exp> l = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp_opt",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_opt ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp_opt",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simples_indexada ::= simples_indexada dimensao 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Indexada(v, d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("simples_indexada",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simples_indexada ::= IDENTIFIER 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Simples(i); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("simples_indexada",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_exp ::= simples_indexada 
            {
              VarExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new VarExp(v); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var_exp",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // chamada ::= IDENTIFIER LPAREN exp_opt RPAREN 
            {
              ChamadaExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> e = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = new ChamadaExp(i, e); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chamada",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primaria ::= chamada 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		ChamadaExp c = (ChamadaExp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primaria ::= var_exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		VarExp v = (VarExp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primaria ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primaria ::= LPAREN expressao RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = e; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("primaria",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao ::= NOT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Nao(e1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao ::= MINUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Menos(e1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao ::= expressao OR expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Ou, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao ::= expressao AND expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.E, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao ::= expressao EQEQ expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Igual, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao ::= expressao LT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Menor, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao ::= expressao GT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Maior, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao ::= expressao MOD expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Mod, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao ::= expressao DIV expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Div, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao ::= expressao MULT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Mul, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao ::= expressao MINUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Sub, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao ::= expressao PLUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Som, e1, e2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao ::= primaria 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = p; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new LiteralBool(l); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= REAL_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.Double l = (java.lang.Double)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new LiteralReal(l); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new LiteralInt(l); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numerico ::= REAL 
            {
              TBase RESULT =null;
		 RESULT = TBase.Real; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("numerico",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numerico ::= INT 
            {
              TBase RESULT =null;
		 RESULT = TBase.Int; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("numerico",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dimensao ::= LBRACK expressao RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		 RESULT = e; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dimensao",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_dimensao ::= lista_dimensao dimensao 
            {
              List<Exp> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Exp> ld = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 ld.add(d); RESULT = ld; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_dimensao",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_dimensao ::= dimensao 
            {
              List<Exp> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<Exp>(Arrays.asList(d)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("lista_dimensao",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_array ::= BOOLEAN lista_dimensao 
            {
              TipoArray RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Exp> d = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new TipoArray(TBase.Bool, d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo_array",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_array ::= numerico lista_dimensao 
            {
              TipoArray RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		TBase t = (TBase)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Exp> d = (List<Exp>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new TipoArray(t, d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo_array",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_base ::= BOOLEAN 
            {
              TipoBase RESULT =null;
		 RESULT = new TipoBase(TBase.Bool); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo_base",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_base ::= numerico 
            {
              TipoBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		TBase n = (TBase)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new TipoBase(n); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo_base",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= tipo_array 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		TipoArray t = (TipoArray)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= tipo_base 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		TipoBase t = (TipoBase)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= dec_proc 
            {
              Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Procedimento d = (Procedimento)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= dec_func 
            {
              Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Funcao d = (Funcao)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= dec_cons 
            {
              Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DCons d = (DCons)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new DecCons(d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= dec_var 
            {
              Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		DVar d = (DVar)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new DecVar(d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec_list dec 
            {
              List<Dec> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		List<Dec> dl = (List<Dec>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec 
            {
              List<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new ArrayList<Dec>(Arrays.asList(d)); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		List<Dec> d = (List<Dec>)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Programa(d); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

