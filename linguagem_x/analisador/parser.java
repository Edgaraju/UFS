
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 09 00:24:36 BRT 2016
//----------------------------------------------------

package analisador;

import java.util.*;
import java_cup.runtime.*;
import sintaxe_abstrata.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 09 00:24:36 BRT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\004\000\002\016\004\000\002\020\003\000\002\020" +
    "\004\000\002\021\005\000\002\017\003\000\002\017\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\024\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\026\006\000\002\025\003\000\002\025" +
    "\004\000\002\030\002\000\002\030\003\000\002\027\003" +
    "\000\002\027\005\000\002\032\003\000\002\032\010\000" +
    "\002\032\012\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\012\000\002\033" +
    "\007\000\002\033\003\000\002\033\003\000\002\034\007" +
    "\000\002\035\006\000\002\036\005\000\002\037\002\000" +
    "\002\037\003\000\002\040\003\000\002\040\004\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\006" +
    "\000\002\006\010\000\002\010\010\000\002\011\006\000" +
    "\002\042\003\000\002\042\005\000\002\043\003\000\002" +
    "\043\005\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\031\005\000\002\012\004\000\002\046\010" +
    "\000\002\050\002\000\002\050\003\000\002\051\003\000" +
    "\002\051\005\000\002\052\003\000\002\052\003\000\002" +
    "\053\004\000\002\054\005\000\002\047\004\000\002\047" +
    "\003\000\002\055\005\000\002\056\002\000\002\056\003" +
    "\000\002\057\003\000\002\057\004\000\002\060\004\000" +
    "\002\013\004\000\002\061\007\000\002\062\002\000\002" +
    "\062\003\000\002\063\003\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\012\004\012\005\023\011\021\012\010\001" +
    "\002\000\014\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc" +
    "\001\002\000\022\021\255\023\051\032\037\043\046\044" +
    "\052\045\040\046\042\047\045\001\002\000\014\002\ufffb" +
    "\004\ufffb\005\ufffb\011\ufffb\012\ufffb\001\002\000\014\002" +
    "\uffff\004\uffff\005\uffff\011\uffff\012\uffff\001\002\000\004" +
    "\047\245\001\002\000\004\002\244\001\002\000\010\006" +
    "\031\007\032\010\026\001\002\000\012\013\161\016\154" +
    "\021\155\047\162\001\002\000\014\002\000\004\012\005" +
    "\023\011\021\012\010\001\002\000\014\002\ufffa\004\ufffa" +
    "\005\ufffa\011\ufffa\012\ufffa\001\002\000\026\002\uffbe\004" +
    "\uffbe\005\uffbe\011\uffbe\012\uffbe\013\uffbe\016\uffbe\021\uffbe" +
    "\022\uffbe\047\uffbe\001\002\000\014\002\ufffd\004\ufffd\005" +
    "\ufffd\011\ufffd\012\ufffd\001\002\000\026\002\uffbc\004\uffbc" +
    "\005\uffbc\011\uffbc\012\uffbc\013\uffbc\016\uffbc\021\uffbc\022" +
    "\uffbc\047\uffbc\001\002\000\010\006\031\007\032\010\026" +
    "\001\002\000\026\002\uffbd\004\uffbd\005\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\016\uffbd\021\uffbd\022\uffbd\047\uffbd\001\002" +
    "\000\010\006\031\007\032\010\026\001\002\000\004\047" +
    "\ufff8\001\002\000\006\017\033\047\ufff7\001\002\000\006" +
    "\017\uffef\047\uffef\001\002\000\004\047\116\001\002\000" +
    "\004\047\ufff9\001\002\000\006\017\033\047\ufff6\001\002" +
    "\000\006\017\ufff0\047\ufff0\001\002\000\020\023\051\032" +
    "\037\043\046\044\052\045\040\046\042\047\045\001\002" +
    "\000\044\017\ufff3\020\ufff3\022\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\047\ufff3\001\002\000" +
    "\006\017\033\047\ufff4\001\002\000\044\017\ufff2\020\ufff2" +
    "\022\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\047\ufff2\001\002\000\020\023\051\032\037\043" +
    "\046\044\052\045\040\046\042\047\045\001\002\000\040" +
    "\020\uffed\022\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\001\002\000\040\020\uffeb\022\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001" +
    "\002\000\040\020\uffec\022\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\001\002\000\040\020\uffdc" +
    "\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\001\002\000\030\020\112\030\056\031\061\032" +
    "\054\033\057\034\062\035\060\037\065\040\063\041\055" +
    "\042\066\001\002\000\044\017\033\020\uffd9\022\uffd9\023" +
    "\103\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\001\002\000\020\023\051\032\037\043\046\044\052" +
    "\045\040\046\042\047\045\001\002\000\040\020\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\001\002\000\040\020\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002\000\020" +
    "\023\051\032\037\043\046\044\052\045\040\046\042\047" +
    "\045\001\002\000\040\020\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002\000\030" +
    "\024\064\030\056\031\061\032\054\033\057\034\062\035" +
    "\060\037\065\040\063\041\055\042\066\001\002\000\020" +
    "\023\051\032\037\043\046\044\052\045\040\046\042\047" +
    "\045\001\002\000\020\023\051\032\037\043\046\044\052" +
    "\045\040\046\042\047\045\001\002\000\020\023\051\032" +
    "\037\043\046\044\052\045\040\046\042\047\045\001\002" +
    "\000\020\023\051\032\037\043\046\044\052\045\040\046" +
    "\042\047\045\001\002\000\020\023\051\032\037\043\046" +
    "\044\052\045\040\046\042\047\045\001\002\000\020\023" +
    "\051\032\037\043\046\044\052\045\040\046\042\047\045" +
    "\001\002\000\020\023\051\032\037\043\046\044\052\045" +
    "\040\046\042\047\045\001\002\000\020\023\051\032\037" +
    "\043\046\044\052\045\040\046\042\047\045\001\002\000" +
    "\040\020\uffde\022\uffde\024\uffde\025\uffde\026\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\001\002\000\020\023\051\032\037" +
    "\043\046\044\052\045\040\046\042\047\045\001\002\000" +
    "\020\023\051\032\037\043\046\044\052\045\040\046\042" +
    "\047\045\001\002\000\040\020\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\057\034\062" +
    "\035\060\037\uffe1\040\uffe1\041\055\042\uffe1\001\002\000" +
    "\040\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\031\061\032\054\033\057\034\062\035\060\037\uffe4\040" +
    "\uffe4\041\055\042\066\001\002\000\040\020\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\061\032\054\033" +
    "\057\034\062\035\060\037\uffe5\040\uffe5\041\055\042\066" +
    "\001\002\000\040\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\040\020" +
    "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\057\034\062\035\060\037\uffea\040\uffea\041" +
    "\055\042\uffea\001\002\000\040\020\uffe6\022\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002" +
    "\000\040\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\001\002\000\040\020\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\061\032\054" +
    "\033\057\034\062\035\060\037\uffe3\040\uffe3\041\055\042" +
    "\066\001\002\000\040\020\uffe2\022\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000\040" +
    "\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\057\034\062\035\060\037\uffe9\040\uffe9" +
    "\041\055\042\uffe9\001\002\000\040\020\uffdf\022\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\030\056\031\061\032\054\033\057" +
    "\034\062\035\060\037\065\040\063\041\055\042\066\001" +
    "\002\000\042\017\033\020\uffd8\022\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001\002\000\022" +
    "\023\051\024\uffd7\032\037\043\046\044\052\045\040\046" +
    "\042\047\045\001\002\000\004\024\111\001\002\000\034" +
    "\022\uffd5\024\uffd5\026\uffd5\030\056\031\061\032\054\033" +
    "\057\034\062\035\060\037\065\040\063\041\055\042\066" +
    "\001\002\000\006\024\uffd6\026\107\001\002\000\020\023" +
    "\051\032\037\043\046\044\052\045\040\046\042\047\045" +
    "\001\002\000\034\022\uffd4\024\uffd4\026\uffd4\030\056\031" +
    "\061\032\054\033\057\034\062\035\060\037\065\040\063" +
    "\041\055\042\066\001\002\000\064\002\uffda\004\uffda\005" +
    "\uffda\011\uffda\012\uffda\013\uffda\015\uffda\016\uffda\020\uffda" +
    "\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\047\uffda\001\002\000\044\017\ufff1\020" +
    "\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\047\ufff1\001\002\000\040\020\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\001\002\000\006\025\130\026\127\001\002\000\006\025" +
    "\uffb7\026\uffb7\001\002\000\012\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\001\002\000\010\025\uffb5\026\uffb5\027\120\001" +
    "\002\000\022\021\121\023\051\032\037\043\046\044\052" +
    "\045\040\046\042\047\045\001\002\000\020\023\051\032" +
    "\037\043\046\044\052\045\040\046\042\047\045\001\002" +
    "\000\006\025\uffb1\026\uffb1\001\002\000\006\025\uffb4\026" +
    "\uffb4\001\002\000\032\025\uffb2\026\uffb2\030\056\031\061" +
    "\032\054\033\057\034\062\035\060\037\065\040\063\041" +
    "\055\042\066\001\002\000\006\022\126\026\107\001\002" +
    "\000\006\025\uffb0\026\uffb0\001\002\000\004\047\116\001" +
    "\002\000\026\002\uffb8\004\uffb8\005\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\016\uffb8\021\uffb8\022\uffb8\047\uffb8\001\002\000" +
    "\006\025\uffb6\026\uffb6\001\002\000\006\017\033\047\ufff5" +
    "\001\002\000\004\047\134\001\002\000\004\023\135\001" +
    "\002\000\014\004\141\006\031\007\032\010\026\024\uffad" +
    "\001\002\000\004\024\152\001\002\000\006\024\uffac\026" +
    "\150\001\002\000\006\024\uffa9\026\uffa9\001\002\000\010" +
    "\006\031\007\032\010\026\001\002\000\006\024\uffab\026" +
    "\uffab\001\002\000\006\024\uffa8\026\uffa8\001\002\000\004" +
    "\047\116\001\002\000\006\024\uffa7\026\uffa7\001\002\000" +
    "\004\047\116\001\002\000\006\024\uffa6\026\uffa6\001\002" +
    "\000\012\004\141\006\031\007\032\010\026\001\002\000" +
    "\006\024\uffaa\026\uffaa\001\002\000\022\021\uffae\023\uffae" +
    "\032\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\001" +
    "\002\000\014\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012\ufffe" +
    "\001\002\000\004\023\231\001\002\000\020\004\012\005" +
    "\023\013\161\016\154\021\155\022\uffc5\047\162\001\002" +
    "\000\026\002\uffd3\004\uffd3\005\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\021\uffd3\022\uffd3\047\uffd3\001\002\000\014" +
    "\002\uff9d\004\uff9d\005\uff9d\011\uff9d\012\uff9d\001\002\000" +
    "\026\002\uffd0\004\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\016\uffd0\021\uffd0\022\uffd0\047\uffd0\001\002\000\004\023" +
    "\170\001\002\000\006\023\103\027\165\001\002\000\026" +
    "\002\uffce\004\uffce\005\uffce\011\uffce\012\uffce\013\uffce\016" +
    "\uffce\021\uffce\022\uffce\047\uffce\001\002\000\026\002\uffcf" +
    "\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013\uffcf\016\uffcf\021" +
    "\uffcf\022\uffcf\047\uffcf\001\002\000\020\023\051\032\037" +
    "\043\046\044\052\045\040\046\042\047\045\001\002\000" +
    "\030\025\167\030\056\031\061\032\054\033\057\034\062" +
    "\035\060\037\065\040\063\041\055\042\066\001\002\000" +
    "\030\002\uffc7\004\uffc7\005\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\021\uffc7\022\uffc7\047\uffc7\001\002\000" +
    "\020\023\051\032\037\043\046\044\052\045\040\046\042" +
    "\047\045\001\002\000\030\024\172\030\056\031\061\032" +
    "\054\033\057\034\062\035\060\037\065\040\063\041\055" +
    "\042\066\001\002\000\004\014\173\001\002\000\012\013" +
    "\200\016\174\021\155\047\162\001\002\000\004\023\214" +
    "\001\002\000\030\002\uffd3\004\uffd3\005\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffcd\016\uffd3\021\uffd3\022\uffd3\047\uffd3" +
    "\001\002\000\026\002\uffd2\004\uffd2\005\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2\047\uffd2\001\002" +
    "\000\004\015\213\001\002\000\004\023\203\001\002\000" +
    "\030\002\uffce\004\uffce\005\uffce\011\uffce\012\uffce\013\uffce" +
    "\015\uffc9\016\uffce\021\uffce\022\uffce\047\uffce\001\002\000" +
    "\030\002\uffcf\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\015\uffca\016\uffcf\021\uffcf\022\uffcf\047\uffcf\001\002\000" +
    "\020\023\051\032\037\043\046\044\052\045\040\046\042" +
    "\047\045\001\002\000\030\024\205\030\056\031\061\032" +
    "\054\033\057\034\062\035\060\037\065\040\063\041\055" +
    "\042\066\001\002\000\004\014\206\001\002\000\012\013" +
    "\200\016\174\021\155\047\162\001\002\000\004\015\210" +
    "\001\002\000\012\013\200\016\174\021\155\047\162\001" +
    "\002\000\026\002\uffd1\004\uffd1\005\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\016\uffd1\021\uffd1\022\uffd1\047\uffd1\001\002\000" +
    "\004\015\uffcc\001\002\000\012\013\161\016\154\021\155" +
    "\047\162\001\002\000\020\023\051\032\037\043\046\044" +
    "\052\045\040\046\042\047\045\001\002\000\030\024\216" +
    "\030\056\031\061\032\054\033\057\034\062\035\060\037" +
    "\065\040\063\041\055\042\066\001\002\000\012\013\200" +
    "\016\174\021\155\047\162\001\002\000\026\002\uffc8\004" +
    "\uffc8\005\uffc8\011\uffc8\012\uffc8\013\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\047\uffc8\001\002\000\004\015\uffcb\001\002\000" +
    "\020\004\012\005\023\013\161\016\154\021\155\022\uffc4" +
    "\047\162\001\002\000\020\004\uffc0\005\uffc0\013\uffc0\016" +
    "\uffc0\021\uffc0\022\uffc0\047\uffc0\001\002\000\004\022\227" +
    "\001\002\000\020\004\uffbf\005\uffbf\013\uffbf\016\uffbf\021" +
    "\uffbf\022\uffbf\047\uffbf\001\002\000\020\004\uffc3\005\uffc3" +
    "\013\uffc3\016\uffc3\021\uffc3\022\uffc3\047\uffc3\001\002\000" +
    "\020\004\uffc1\005\uffc1\013\uffc1\016\uffc1\021\uffc1\022\uffc1" +
    "\047\uffc1\001\002\000\030\002\uffc6\004\uffc6\005\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\021\uffc6\022\uffc6" +
    "\047\uffc6\001\002\000\020\004\uffc2\005\uffc2\013\uffc2\016" +
    "\uffc2\021\uffc2\022\uffc2\047\uffc2\001\002\000\020\023\051" +
    "\032\037\043\046\044\052\045\040\046\042\047\045\001" +
    "\002\000\030\024\233\030\056\031\061\032\054\033\057" +
    "\034\062\035\060\037\065\040\063\041\055\042\066\001" +
    "\002\000\012\013\161\016\154\021\155\047\162\001\002" +
    "\000\004\047\116\001\002\000\006\025\237\027\236\001" +
    "\002\000\022\021\121\023\051\032\037\043\046\044\052" +
    "\045\040\046\042\047\045\001\002\000\026\002\uffbb\004" +
    "\uffbb\005\uffbb\011\uffbb\012\uffbb\013\uffbb\016\uffbb\021\uffbb" +
    "\022\uffbb\047\uffbb\001\002\000\004\025\243\001\002\000" +
    "\030\025\242\030\056\031\061\032\054\033\057\034\062" +
    "\035\060\037\065\040\063\041\055\042\066\001\002\000" +
    "\026\002\uffba\004\uffba\005\uffba\011\uffba\012\uffba\013\uffba" +
    "\016\uffba\021\uffba\022\uffba\047\uffba\001\002\000\026\002" +
    "\uffb9\004\uffb9\005\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9" +
    "\021\uffb9\022\uffb9\047\uffb9\001\002\000\004\002\001\001" +
    "\002\000\004\023\246\001\002\000\012\006\031\007\032" +
    "\010\026\024\uff9b\001\002\000\006\024\uff9a\026\253\001" +
    "\002\000\006\024\uff99\026\uff99\001\002\000\004\024\252" +
    "\001\002\000\012\013\uff9c\016\uff9c\021\uff9c\047\uff9c\001" +
    "\002\000\010\006\031\007\032\010\026\001\002\000\006" +
    "\024\uff98\026\uff98\001\002\000\022\022\uffa2\023\051\032" +
    "\037\043\046\044\052\045\040\046\042\047\045\001\002" +
    "\000\014\002\uffa4\004\uffa4\005\uffa4\011\uffa4\012\uffa4\001" +
    "\002\000\030\025\261\030\056\031\061\032\054\033\057" +
    "\034\062\035\060\037\065\040\063\041\055\042\066\001" +
    "\002\000\014\002\uffaf\004\uffaf\005\uffaf\011\uffaf\012\uffaf" +
    "\001\002\000\014\002\uffa5\004\uffa5\005\uffa5\011\uffa5\012" +
    "\uffa5\001\002\000\022\022\uffa0\023\uffa0\032\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002\000\022\022" +
    "\uffa1\023\051\032\037\043\046\044\052\045\040\046\042" +
    "\047\045\001\002\000\030\025\267\030\056\031\061\032" +
    "\054\033\057\034\062\035\060\037\065\040\063\041\055" +
    "\042\066\001\002\000\004\022\266\001\002\000\014\002" +
    "\uffa3\004\uffa3\005\uffa3\011\uffa3\012\uffa3\001\002\000\022" +
    "\022\uff9e\023\uff9e\032\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\001\002\000\022\022\uff9f\023\uff9f\032\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\032\002\010\003\013\004\006\005\016\006" +
    "\021\007\015\010\017\011\003\012\005\013\014\046\004" +
    "\061\012\001\001\000\002\001\001\000\020\022\046\023" +
    "\256\024\040\025\042\026\047\047\257\055\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\233\015\027\016\023\017\024" +
    "\001\001\000\014\026\162\032\156\034\157\035\163\036" +
    "\155\001\001\000\026\004\152\005\016\006\021\007\015" +
    "\010\017\011\003\012\005\013\014\046\004\061\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\132\015\027\016\023\017" +
    "\024\001\001\000\002\001\001\000\012\014\026\015\027" +
    "\016\023\017\024\001\001\000\002\001\001\000\006\020" +
    "\131\021\033\001\001\000\002\001\001\000\010\042\113" +
    "\043\114\044\116\001\001\000\002\001\001\000\006\020" +
    "\034\021\033\001\001\000\002\001\001\000\014\022\046" +
    "\023\043\024\040\025\042\026\047\001\001\000\002\001" +
    "\001\000\004\021\035\001\001\000\002\001\001\000\014" +
    "\022\046\023\112\024\040\025\042\026\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\101\021\033\001" +
    "\001\000\014\022\046\023\100\024\040\025\042\026\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\046\023\052\024\040\025\042\026\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\046\023\077\024" +
    "\040\025\042\026\047\001\001\000\014\022\046\023\076" +
    "\024\040\025\042\026\047\001\001\000\014\022\046\023" +
    "\075\024\040\025\042\026\047\001\001\000\014\022\046" +
    "\023\074\024\040\025\042\026\047\001\001\000\014\022" +
    "\046\023\073\024\040\025\042\026\047\001\001\000\014" +
    "\022\046\023\072\024\040\025\042\026\047\001\001\000" +
    "\014\022\046\023\071\024\040\025\042\026\047\001\001" +
    "\000\014\022\046\023\070\024\040\025\042\026\047\001" +
    "\001\000\002\001\001\000\014\022\046\023\067\024\040" +
    "\025\042\026\047\001\001\000\014\022\046\023\066\024" +
    "\040\025\042\026\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\035\001\001\000\020\022\046\023\104\024\040" +
    "\025\042\026\047\027\105\030\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\046" +
    "\023\107\024\040\025\042\026\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\046\023\123\024\040\025\042" +
    "\026\047\031\121\045\122\001\001\000\016\022\046\023" +
    "\104\024\040\025\042\026\047\027\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\130\044\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\143" +
    "\015\027\016\023\017\024\050\135\051\136\052\141\053" +
    "\137\054\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\145\015\027\016\023\017" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\144\001\001\000\002\001\001\000\004\044\146\001" +
    "\001\000\002\001\001\000\020\014\143\015\027\016\023" +
    "\017\024\052\150\053\137\054\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\221\006\021\007\015\010\017\011\223\026" +
    "\162\032\225\034\157\035\163\036\155\037\222\040\220" +
    "\041\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\046\023\165\024" +
    "\040\025\042\026\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\046\023\170\024\040\025\042\026" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\200\032\175\033\176\034\157\035\201\036\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\046\023\203\024\040\025\042" +
    "\026\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\200\032\175\033\206\034\157\035\201\036\174" +
    "\001\001\000\002\001\001\000\016\026\200\032\210\033" +
    "\211\034\157\035\201\036\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\026\162\032\210\034\157\035" +
    "\163\036\155\001\001\000\014\022\046\023\214\024\040" +
    "\025\042\026\047\001\001\000\002\001\001\000\016\026" +
    "\200\032\216\033\217\034\157\035\201\036\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\221\006" +
    "\021\007\015\010\017\011\223\026\162\032\225\034\157" +
    "\035\163\036\155\041\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\046\023\231\024\040\025\042\026\047\001\001\000\002" +
    "\001\001\000\014\026\162\032\216\034\157\035\163\036" +
    "\155\001\001\000\004\044\234\001\001\000\002\001\001" +
    "\000\016\022\046\023\240\024\040\025\042\026\047\031" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\143\015\027\016\023" +
    "\017\024\053\247\062\250\063\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\143\015\027\016\023\017\024\053\253\001" +
    "\001\000\002\001\001\000\022\022\046\023\263\024\040" +
    "\025\042\026\047\056\264\057\262\060\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\046\023\263\024" +
    "\040\025\042\026\047\060\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");

        if (info instanceof java_cup.runtime.Symbol) {
            m.append( "("+info.toString()+")" );
        }
        m.append(" : "+message);
        System.out.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_param_formal_proc ::= lista_param_formal_proc COMMA param_ref 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_param_formal_proc ::= param_ref 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_param_formal_proc_opt ::= lista_param_formal_proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_param_formal_proc_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_proc_opt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ass_proc ::= PROCEDURE IDENTIFIER LPAREN lista_param_formal_proc_opt RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_proc",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dec_proc ::= ass_proc comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_proc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_exp ::= expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_bloco_exp ::= dec_bloco_exp dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_bloco_exp ::= dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_bloco_exp_opt ::= dec_bloco_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_bloco_exp_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_bloco_exp_opt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloco_exp ::= LBRACE dec_bloco_exp_opt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_exp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // corpo_func ::= bloco_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_func",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // corpo_func ::= expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpo_func",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // param_copia ::= VAR tipo declarador_var_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_copia",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // param_ref ::= tipo declarador_var_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_ref",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // param_formal ::= param_copia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_formal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // param_formal ::= param_ref 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_formal",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_param_formal ::= lista_param_formal COMMA param_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_param_formal ::= param_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_param_formal_opt ::= lista_param_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_param_formal_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_formal_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ass_func ::= FUNCTION tipo IDENTIFIER LPAREN lista_param_formal_opt RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_func",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec_func ::= ass_func corpo_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_func",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inicializador_array ::= LBRACE lista_expressao RBRACE 
            {
              List<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Exp> l = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializador_array",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inicializador_var ::= inicializador_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializador_var",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inicializador_var ::= expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializador_var",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declarador_var_id ::= IDENTIFIER 
            {
              java.lang.String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarador_var_id",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarador_var ::= declarador_var_id EQ inicializador_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarador_var",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declarador_var ::= declarador_var_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarador_var",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarador_vars ::= declarador_vars COMMA declarador_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarador_vars",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarador_vars ::= declarador_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarador_vars",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_cons ::= CONS tipo declarador_vars SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_cons",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_inic_ext ::= VAR tipo declarador_var_id EQ inicializador_array SEMICOLON 
            {
              VarInicExt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Exp> le = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarInicExt(t, id, le); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inic_ext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_inic ::= VAR tipo declarador_var_id EQ expressao SEMICOLON 
            {
              VarInic RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarInic(t, id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inic",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_ninic ::= VAR tipo declarador_var_id SEMICOLON 
            {
              VarNaoInic RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarNaoInic(t, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_ninic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_var ::= var_inic_ext 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInicExt v = (VarInicExt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_var ::= var_inic 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInic v = (VarInic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_var ::= var_ninic 
            {
              DVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarNaoInic v = (VarNaoInic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_comandos ::= dec_cons 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comandos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_comandos ::= dec_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comandos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_comandos ::= comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comandos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloco_comandos ::= bloco_comandos dec_comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloco_comandos ::= dec_comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloco_comandos_opt ::= bloco_comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloco_comandos_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloco ::= LBRACE bloco_comandos_opt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign ::= IDENTIFIER EQ expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while ::= WHILE LPAREN expressao RPAREN comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comando_restrito ::= chamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_restrito",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comando_restrito ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_restrito",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comando_restrito ::= WHILE LPAREN expressao RPAREN comando_restrito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_restrito",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comando_restrito ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando_restrito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_restrito",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando_restrito ::= bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_restrito",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando ::= chamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando ::= IF LPAREN expressao RPAREN THEN comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando ::= bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_expressao ::= lista_expressao COMMA expressao 
            {
              List<Exp> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Exp> le = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 le.add(e); RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_expressao ::= expressao 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Exp>(Arrays.asList(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_opt ::= lista_expressao 
            {
              List<Exp> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_opt ::= 
            {
              List<Exp> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_exp ::= IDENTIFIER lista_dimensao 
            {
              VarExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_exp ::= IDENTIFIER 
            {
              VarExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(new Simples(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // chamada ::= IDENTIFIER LPAREN exp_opt RPAREN 
            {
              ChamadaExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Exp> e = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChamadaExp(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primaria ::= chamada 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ChamadaExp c = (ChamadaExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaria",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primaria ::= var_exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExp v = (VarExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaria",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primaria ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaria",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primaria ::= LPAREN expressao RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaria",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao ::= NOT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nao(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao ::= MINUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao ::= expressao OR expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Ou, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao ::= expressao AND expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.E, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao ::= expressao EQEQ expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Igual, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao ::= expressao LT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Menor, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao ::= expressao GT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Maior, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao ::= expressao MOD expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Mod, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao ::= expressao DIV expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Div, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao ::= expressao MULT expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Mul, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao ::= expressao MINUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Sub, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao ::= expressao PLUS expressao 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinExp(BinOp.Som, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao ::= primaria 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralBool(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= REAL_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Double l = (java.lang.Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralReal(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralInt(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numerico ::= REAL 
            {
              TBase RESULT =null;
		 RESULT = TBase.Real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numerico ::= INT 
            {
              TBase RESULT =null;
		 RESULT = TBase.Int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dimensao ::= LBRACK expressao RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_dimensao ::= lista_dimensao dimensao 
            {
              List<Exp> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Exp> ld = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ld.add(d); RESULT = ld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_dimensao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_dimensao ::= dimensao 
            {
              List<Exp> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Exp>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_dimensao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_array ::= BOOLEAN lista_dimensao 
            {
              TipoArray RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Exp> d = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoArray(TBase.Bool, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_array",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_array ::= numerico lista_dimensao 
            {
              TipoArray RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TBase t = (TBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Exp> d = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoArray(t, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_array",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_base ::= BOOLEAN 
            {
              TipoBase RESULT =null;
		 RESULT = new TipoBase(TBase.Bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_base",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_base ::= numerico 
            {
              TipoBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TBase n = (TBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoBase(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_base",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= tipo_array 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoArray t = (TipoArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= tipo_base 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoBase t = (TipoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= dec_proc 
            {
              Dec RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= dec_func 
            {
              Dec RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= dec_cons 
            {
              Dec RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= dec_var 
            {
              Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DVar d = (DVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecVar(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec_list dec 
            {
              List<Dec> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Dec> dl = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec 
            {
              List<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Dec>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Dec> d = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

